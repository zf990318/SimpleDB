package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    
    private JoinPredicate p;
    private DbIterator child1,child2;
    private TupleDesc td;
    private Tuple tuple1,tuple2;
    HashMap<Object, ArrayList<Tuple>> map = new HashMap<>();
    
    public final static int MAP_SIZE = 20000;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	this.p = p;
    	this. child1 = child1;
    	this.child2 = child2;
    	this.tuple1 = null;
    	this.tuple2 = null;
    	this.td = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return td;
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
	    return child1.getTupleDesc().getFieldName(p.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
    	return child2.getTupleDesc().getFieldName(p.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
        // some code goes here
    	super.close();
    	child1.close();
    	child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	child1.rewind();
    	child2.rewind();
    }

    transient Iterator<Tuple> listIt = null;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    private Tuple getTupleList() {
    	tuple1 = listIt.next();

    	int index1 = 0;
    	int index2 = 0;
        int fields1 = tuple1.getTupleDesc().numFields();
        int fields2 = tuple2.getTupleDesc().numFields();
        Tuple tuples = new Tuple(td);

        while(index1< fields1) {
            tuples.setField(index1, tuple1.getField(index1));
            index1 +=1;
        }

        while(index2 < fields2) {
        	tuples.setField(fields1 + index2, tuple2.getField(index2));
            index2 +=1;
        }

        return tuples;
    }

    private boolean getMap() throws DbException, TransactionAbortedException {
        int count = 0;
        map.clear();
        while (child1.hasNext()) {
            tuple1 = child1.next();
            ArrayList<Tuple> list = map.computeIfAbsent(tuple1.getField(p.getField1()), k -> new ArrayList<>());
            list.add(tuple1);
            if (count++ == MAP_SIZE)
                return true;
        }

        return count > 0;
    }

    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	if (listIt != null && listIt.hasNext())
            return getTupleList();

        while (child2.hasNext()) {
            tuple2 = child2.next();
            ArrayList<Tuple> tupleList = map.get(tuple2.getField(p.getField2()));

            if (tupleList == null)
                continue;

            listIt = tupleList.iterator();

            return getTupleList();
        }

        child2.rewind();

        if (getMap())
            return fetchNext();
        else
        	return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[] {this.child1,this.child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    	this.child1 = children[0];
    	this.child2 = children[1];
    }
    
}
